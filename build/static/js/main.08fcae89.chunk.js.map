{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","foodName","setFoodName","days","setDays","foodList","setFoodList","newFoodName","setNewFoodName","useEffect","Axios","get","then","response","data","map","food","className","type","onChange","e","target","value","onClick","post","foodItem","placeholder","New","Food","Name","id","_id","put","daysSinceEaten","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA8DeA,MA1Df,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEWF,mBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIyBN,mBAAS,IAJlC,mBAINO,EAJM,KAIOC,EAJP,KA+Bb,OAzBAC,qBAAU,WACRC,IAAMC,IAAI,4CAA4CC,MAAK,SAACC,GAC1DP,EAAYO,EAASC,KAAKC,KAAI,SAAAC,GAAI,OAAEA,WAErC,IAsBD,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,8CACA,0CACA,uBAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAElB,EAAYkB,EAAEC,OAAOC,QAAQA,MAAOrB,IACpE,gDACA,uBAAOiB,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAEhB,EAAQgB,EAAEC,OAAOC,QAAQA,MAAOnB,IAClE,uBAAOc,UAAU,YAAYM,QA3BjB,WAChBb,IAAMc,KAAK,0CAA2C,CACpDvB,SAAUA,EAAUE,KAAMA,IAE5BD,EAAY,IACZE,EAAQ,IAsBJ,0BAEF,uBACCC,EAASU,KAAI,SAAAU,GAAQ,OACpB,gCACE,6BAAK,aAAaA,EAASxB,WAC3B,uBACAiB,KAAK,OACLQ,YAAY,GAAEC,KAAG,EAACC,MAAI,EAACC,MAAI,EAC3BV,SAAU,SAAAC,GAAC,OAAEZ,EAAeY,EAAEC,OAAOC,UACrC,uBAAOC,QAAS,kBA7BJO,EA6BmBL,EAASM,SA5B9CrB,IAAMsB,IAAI,6CAA8C,CACtDF,GAAIA,EACJvB,YAAaA,IAHE,IAACuB,GA6BZ,oBACA,6BAAK,SAASL,EAASQ,iBACvB,uBAAOV,QAAS,kBAxBJO,EAwBmBL,EAASM,SAvB9CrB,IAAMwB,OAAN,qDAA2DJ,IAD1C,IAACA,GAwBZ,sBARQL,EAASM,YCnCZI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.08fcae89.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react'\nimport Axios from 'axios' \n\nfunction App() {\n  const [foodName, setFoodName] = useState('')\n  const [days, setDays] = useState(0)\n  const [foodList, setFoodList] = useState([])\n  const [newFoodName, setNewFoodName] = useState('')\n  \n  useEffect(()=>{\n    Axios.get('https://crudmernfatih.herokuapp.com/read').then((response)=>{\n      setFoodList(response.data.map(food=>food));\n    })\n  }, [])\n\n  const addToList = ()=>{\n    Axios.post('https://crudmernfatih.herokuapp.com/add', {\n      foodName: foodName, days: days\n    });\n    setFoodName('');\n    setDays(0);\n  }\n\n  const updateFood = (id)=>{\n    Axios.put('https://crudmernfatih.herokuapp.com/update', {\n      id: id,\n      newFoodName: newFoodName\n    })\n  }\n\n  const deleteFood = (id)=>{\n    Axios.delete(`https://crudmernfatih.herokuapp.com/delete/${id}`);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"foodform\">\n        <h2>MERN FoodApp</h2>\n        <h3>foodname</h3>\n        <input type=\"text\" onChange={e=>setFoodName(e.target.value)} value={foodName}/>\n        <h3>daysSinceEaten</h3>\n        <input type=\"number\" onChange={e=>setDays(e.target.value)} value={days}/>\n        <label className=\"submitbtn\" onClick={addToList}>Add to db</label>\n      </div>\n      <hr></hr>\n      {foodList.map(foodItem=>(\n        <div key={foodItem._id}>\n          <h2>{'foodItem: '+foodItem.foodName}</h2>\n          <input\n          type=\"text\"\n          placeholder=\"\"New Food Name\n          onChange={e=>setNewFoodName(e.target.value)}/>\n          <label onClick={()=>updateFood(foodItem._id)}>update</label>\n          <h4>{'days: '+foodItem.daysSinceEaten}</h4>\n          <label onClick={()=>deleteFood(foodItem._id)}>delete</label>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}